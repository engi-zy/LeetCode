/*
Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    /*
    int left=0;
    int right=0;*/
    public boolean isBalanced(TreeNode root) {
        int Depth=depth(root);
        return Depth!=-5;
    }
    
    public static int depth(TreeNode root){
        if(root==null){
            return 0;
        }
        int left=depth(root.left);
        int right=depth(root.right);
        if(root.left!=null){
            left++;
        }
        if(root.right!=null){
            right++;
        }
        int Dep=Math.max(left,right);
        if(Math.abs(right-left)>1 || left<0 || right<0){
            Dep=-5;
        }
        return Dep;
    }
}